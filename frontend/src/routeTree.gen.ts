/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthTransactionsImport } from './routes/_auth.transactions'
import { Route as AuthTransactionsCreateImport } from './routes/_auth.transactions.create'
import { Route as AuthTransactionsEditTransactionIdImport } from './routes/_auth.transactions.edit.$transactionId'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthTransactionsRoute = AuthTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AuthRoute,
} as any)

const AuthTransactionsCreateRoute = AuthTransactionsCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AuthTransactionsRoute,
} as any)

const AuthTransactionsEditTransactionIdRoute =
  AuthTransactionsEditTransactionIdImport.update({
    id: '/edit/$transactionId',
    path: '/edit/$transactionId',
    getParentRoute: () => AuthTransactionsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/_auth/transactions': {
      id: '/_auth/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthTransactionsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/transactions/create': {
      id: '/_auth/transactions/create'
      path: '/create'
      fullPath: '/transactions/create'
      preLoaderRoute: typeof AuthTransactionsCreateImport
      parentRoute: typeof AuthTransactionsImport
    }
    '/_auth/transactions/edit/$transactionId': {
      id: '/_auth/transactions/edit/$transactionId'
      path: '/edit/$transactionId'
      fullPath: '/transactions/edit/$transactionId'
      preLoaderRoute: typeof AuthTransactionsEditTransactionIdImport
      parentRoute: typeof AuthTransactionsImport
    }
  }
}

// Create and export the route tree

interface AuthTransactionsRouteChildren {
  AuthTransactionsCreateRoute: typeof AuthTransactionsCreateRoute
  AuthTransactionsEditTransactionIdRoute: typeof AuthTransactionsEditTransactionIdRoute
}

const AuthTransactionsRouteChildren: AuthTransactionsRouteChildren = {
  AuthTransactionsCreateRoute: AuthTransactionsCreateRoute,
  AuthTransactionsEditTransactionIdRoute:
    AuthTransactionsEditTransactionIdRoute,
}

const AuthTransactionsRouteWithChildren =
  AuthTransactionsRoute._addFileChildren(AuthTransactionsRouteChildren)

interface AuthRouteChildren {
  AuthTransactionsRoute: typeof AuthTransactionsRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthTransactionsRoute: AuthTransactionsRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/transactions': typeof AuthTransactionsRouteWithChildren
  '/transactions/create': typeof AuthTransactionsCreateRoute
  '/transactions/edit/$transactionId': typeof AuthTransactionsEditTransactionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/transactions': typeof AuthTransactionsRouteWithChildren
  '/transactions/create': typeof AuthTransactionsCreateRoute
  '/transactions/edit/$transactionId': typeof AuthTransactionsEditTransactionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/test': typeof TestRoute
  '/_auth/transactions': typeof AuthTransactionsRouteWithChildren
  '/_auth/transactions/create': typeof AuthTransactionsCreateRoute
  '/_auth/transactions/edit/$transactionId': typeof AuthTransactionsEditTransactionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/test'
    | '/transactions'
    | '/transactions/create'
    | '/transactions/edit/$transactionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/test'
    | '/transactions'
    | '/transactions/create'
    | '/transactions/edit/$transactionId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/about'
    | '/login'
    | '/test'
    | '/_auth/transactions'
    | '/_auth/transactions/create'
    | '/_auth/transactions/edit/$transactionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/about",
        "/login",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/transactions"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/_auth/transactions": {
      "filePath": "_auth.transactions.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/transactions/create",
        "/_auth/transactions/edit/$transactionId"
      ]
    },
    "/_auth/transactions/create": {
      "filePath": "_auth.transactions.create.tsx",
      "parent": "/_auth/transactions"
    },
    "/_auth/transactions/edit/$transactionId": {
      "filePath": "_auth.transactions.edit.$transactionId.tsx",
      "parent": "/_auth/transactions"
    }
  }
}
ROUTE_MANIFEST_END */
