/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id("java")
    id("org.springframework.boot") version "3.4.3"
    id("org.springdoc.openapi-gradle-plugin") version "1.9.0"
    jacoco
}

group = "com.beaverbyte"
version = "0.0.1-SNAPSHOT"
description = "Financial Tracker Application"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
    gradlePluginPortal()
	mavenCentral()
}

configurations {
    runtimeOnly {
        exclude(group = "commons-logging", module = "commons-logging")
    }
}

dependencies {
    implementation(libs.org.springframework.boot.spring.boot.starter.actuator)
    implementation(libs.org.springframework.boot.spring.boot.starter.data.jpa)
    implementation(libs.org.springframework.boot.spring.boot.starter.security)
    implementation(libs.org.springframework.boot.spring.boot.starter.data.rest)
    implementation(libs.org.springframework.boot.spring.boot.starter.web)
    implementation(libs.me.paulschwarz.spring.dotenv)
    implementation(libs.org.springframework.boot.spring.boot.starter.validation)
    implementation(libs.io.jsonwebtoken.jjwt.api)
    implementation(libs.io.rest.assured.rest.assured)
    implementation(libs.org.mapstruct.mapstruct)
    implementation(libs.org.springdoc.springdoc.openapi.starter.webmvc.ui)
    implementation("org.webjars:webjars-locator-lite:1.0.1")
    implementation("net.datafaker:datafaker:2.4.2")
    // implementation("com.fasterxml.jackson.core:jackson-databind:2.19.0")
    // implementation("org.liquibase:liquibase-core:4.22.0")
    annotationProcessor(libs.org.mapstruct.mapstruct.processor)
    runtimeOnly(libs.org.springframework.boot.spring.boot.devtools)
    runtimeOnly(libs.org.postgresql.postgresql)
    runtimeOnly(libs.io.jsonwebtoken.jjwt.impl)
    runtimeOnly(libs.io.jsonwebtoken.jjwt.jackson)
    testImplementation(libs.org.springframework.boot.spring.boot.starter.test)
    testImplementation(libs.org.springframework.security.spring.security.test)
    testImplementation(libs.org.junit.jupiter.junit.jupiter)
    testImplementation(libs.org.testcontainers.testcontainers)
    testImplementation(libs.org.testcontainers.junit.jupiter)
    testImplementation(libs.org.testcontainers.postgresql)
    testImplementation(libs.org.mockito.mockito.core)
}

tasks.test {
    useJUnitPlatform() // Ensure that JUnit platform is being used
    finalizedBy("jacocoTestReport") // Allows for "gradle test" instead "gradle test jacocoTestReport"
    doLast {
        println("View code coverage at:")
        println("file://$buildDir/reports/jacoco/test/html/index.html")
    }
}

tasks.withType<JacocoReport> {
  classDirectories.setFrom(
    sourceSets.main.get().output.asFileTree.matching {
        // exclude("com/beaverbyte/financial_tracker_application/dto")
        // exclude("com/beaverbyte/financial_tracker_application/constants")
    }
  )
}